#!/bin/bash
set -eo pipefail

echo " -----> Environment variables set for the deployed application."
env

echo " -----> Current working directory."
pwd

echo " -----> Patching SQLite (temporary workaround)..."
cd /tmp

curl -fL -A "Mozilla/5.0" -o sqlite-autoconf-3500100.tar.gz https://www.sqlite.org/2025/sqlite-autoconf-3500100.tar.gz \
  || { echo "Failed to download SQLite source. Exiting."; exit 1; }

tar xzf sqlite-autoconf-3500100.tar.gz \
  || { echo "Failed to extract SQLite archive. Exiting."; exit 1; }

cd sqlite-autoconf-3500100

INSTALL_DIR=/tmp/sqlite

./configure --prefix=$INSTALL_DIR && make && make install \
  || { echo "SQLite build failed. Exiting."; exit 1; }

export PATH="$INSTALL_DIR/bin:$PATH"
export LD_LIBRARY_PATH="$INSTALL_DIR/lib:$LD_LIBRARY_PATH"
export PKG_CONFIG_PATH="$INSTALL_DIR/lib/pkgconfig:$PKG_CONFIG_PATH"

echo " -----> SQLite version:"
sqlite3 --version || { echo "SQLite not installed correctly. Exiting."; exit 1; }

echo " -----> Cleaning up build files..."
rm -rf /tmp/sqlite-autoconf-3500100*

# Prepare media directory if using persistent volume
if [ -d /opt/app-root/data ]; then
    if [ ! -d /opt/app-root/data/media/images ]; then
        echo " -----> Creating directory for uploaded image files."
        mkdir -p /opt/app-root/data/media/images
    fi
fi

# Application-specific deploy logic
if [ x"$DATABASE_HOST" != x"" ]; then
    powershift image migrate
elif [ x"$DATABASE_URL" != x"" -o -d /opt/app-root/secrets/database ]; then
    powershift image migrate
elif [ -d /opt/app-root/data ]; then
    if [ ! -f /opt/app-root/data/db.sqlite3 ]; then
        powershift image migrate
    fi
elif [ ! -f /opt/app-root/src/db.sqlite3 ]; then
    DJANGO_ADMIN_USERNAME=developer \
    DJANGO_ADMIN_EMAIL=developer@example.com \
    DJANGO_ADMIN_PASSWORD=developer powershift image setup
fi

echo " -----> Contents of the current working directory after build run."
ls -lasR . || true
